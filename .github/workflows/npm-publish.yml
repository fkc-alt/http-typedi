# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages
# npm ci === npm install

name: http-typedi
 
on: 
  push: 
    branches: 
    - main
    paths-ignore:
      - 'docs/**'
  pull_request: 
    branches: 
    - main 
    paths-ignore:
      - 'docs/**'
 # push: 
 #   branches: 
 #   - main 
 #   paths-ignore:
 #    - 'docs/**'
env:
  DIST_NAME: dist
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  REGISTRY_URL: https://registry.npmjs.org/
  PACKAGE_VERSION: $(node -p "require('./package.json').version")
jobs: 
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Build Package
        run: npm run build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DIST_NAME }}
          path: ${{ env.DIST_NAME }}

  publish-npm: 
    needs: build
    runs-on: ubuntu-latest 
    steps: 
      # From https://github.com/http-typedi Extract code from
      - uses: actions/checkout@v4 

      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with: 
          node-version: 20
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DIST_NAME }}
          path: ${{ env.DIST_NAME }}

      - name: Install Dependencies
        run: npm install

      - name: Check for Existing Package and Publish New Version
        run: |
          NEW_VERSION=$(npm show http-typedi version) 

          # If the new package version does not exist, then publish new package version
          if [ "${{ env.PACKAGE_VERSION }}" != "$NEW_VERSION" ]; then 
            npm publish 
            echo "Published new version $PACKAGE_VERSION"

          # If a new software package version already exists, no action will be taken
          else 
            echo "Nothing to do. Package version $PACKAGE_VERSION already exists."
            exit 0
          fi 
